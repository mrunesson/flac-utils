#!/usr/bin/env python

from __future__ import print_function
from mutagen.flac import FLAC
import sys
import os
import argparse
import shutil

def main(argv):
    parser = argparse.ArgumentParser(
        description='Merge tags from two flac files.',
        epilog="""flac-merge take two flac files and merge the tags.
        It requires that the md5 signature of the audio part in the
        files are equal. Values of the second file will override the
        first file. If destination file not provided, result is written
        to the second file.""")
    parser.add_argument('FILE', nargs=2, help='Flac file used as base line.')
    parser.add_argument('DESTFILE', nargs='?', help='Destination file.')
    parser.add_argument('-v', '--verbose', action='store_true', help='Verbose output.')
    parser.add_argument('-b', '--both', action='store_true', help='Save all tags to all files. If destination file given, all three files will get the same tags.')
    
    args = parser.parse_args(argv[1:])
    
    firstfile=FLAC(args.FILE[0])
    secondfile=FLAC(args.FILE[1])

    if args.DESTFILE:
        shutil.copyfile(args.FILE[1], args.DESTFILE)
        secondfile=FLAC(args.DESTFILE)
    

    comp=flacCompare.flacCompare(firstfile,secondfile)
    if not comp.audioEqual() :
        print("Audio part is not equal. Cannot merge.", file=sys.stderr)
        sys.exit(1)

    if args.verbose:
        print("Following tags are added: ", comp.removedTags())

    comp.merge()
    if args.verbose:
        print("Saving result to ",)
        if args.DESTFILE is None:
            print(args.FILE[1])
        else:
            print(args.DESTFILE)
    secondfile.save()

    if args.both:
        secondfile.save(args.FILE[0])
        if args.DESTFILE:
            secondfile.save(args.FILE[1])
    
if __name__ == "__main__":
    try: import flacCompare
    except ImportError:
        sys.path.append(os.path.abspath("../flac-utils"))
        import flacCompare
    main(sys.argv)
