#!/usr/bin/env python

from __future__ import print_function
from mutagen.flac import FLAC
import sys
import os
import argparse

def isRemote(dir):
    """Check if dir is a remote directory."""
    if (dir.find(":") != -1):
        return True
    else:
        return False

def main(argv):
    parser = argparse.ArgumentParser(
        description='Sync file tree of flacs comments for files with the same audio-part.',
        epilog="""flac-sync take two directories and sync the those directory
        trees flac files comment. File with different audio part are not
        handled. If a files only exist in one of the trees the file is ignored.
        """)
    parser.add_argument('SRCDIR', help='Flac file used as base line.')
    parser.add_argument('DESTDIR', help='Second flac file.')
    parser.add_argument('-v', '--verbose', action='store_true', help='Verbose output.')
    parser.add_argument('-a', '--audio', action='store_true', help='Tell when audio part differs.')
    parser.add_argument('-c', '--copy', action='store_true', help='Copy missing files from source to dest.')
    parser.add_argument('-d', '--dry', action='store_true', help='Dry run. Only tells what differs.')
    parser.add_argument('-b', '--both', action='store_true', help='Save all tags to both files.')
    parser.add_argument('-o', '--overwrite', action='store_true', help='If a tags differ between src and dest. src value is copied to dest. NOT IMPLEMENTED!')
    
    args = parser.parse_args(argv[1:])

    if (isRemote(args.SRCDIR) and isRemote(args.DESTDIR)):
        print("ERROR: Both source and destenation dir cannot be remote.")


    for root, dirs, files in os.walk(args.SRCDIR):
    	destroot=args.DESTDIR+root[len(args.SRCDIR):]
	for name in files:
	    srcFile=os.path.join(root, name)
	    dstFile=os.path.join(destroot, name)
	    if not os.path.isfile(dstFile):
	        if args.verbose:
		   print("File " + dstFile + " missing.")
		if args.copy:
		    if not args.dry:
		        shutils.makedirs(os.path.dirname(dstFile))
                        shutil.copyfile(srcFile, dstFile)
		    else:
		        print("cp " + srcFile + " " + dstFile)
		break

	    srcFlac=FLAC(srcFile)
            dstFlac=FLAC(dstFile)
            comp=flacCompare.flacCompare(srcFlac,dstFlac)
 	    if comp.equals():
                # If files equal do not do anything.
	        if args.verbose:
		    print(srcFile + " and " + dstFile + " are equal.")
	        break

            if not comp.audioEqual():
	       	if args.copy:
		    if not args.time or os.path.getmtime(srcFile) > os.path.getmtime(dstFile):
                        if not args.dry:
                            shutil.copyfile(srcFile, dstFile)
  		        else:
		            print("cp " + srcFile + " " + dstFile)
		    elif args.both and args.time and os.path.getmtime(srcFile) < os.path.getmtime(dstFile):
                        if not args.dry:
                            shutil.copyfile(dstFile, srcFile)
  		        else:
		            print("cp " + dstFile + " " + srcFile)

		break
            elif args.verbose:
                print(srcFile + " and " + dstFile + " audio are equal.")

            new=comp.newTags()
            if new!=[]:
                new.sort()
	        if args.verbose:
                    print("Following tags exist only at " + dstFile + ": ", new)
                if args.dry:
                    print("Following tags copied from " + srcFile + " to " + dstFile + ": ", new)
		else:
		    comp.merge()
            

            removed=comp.removedTags()
            if removed!=[]:
                removed.sort()
	        if args.verbose:
                    print("Following tags exist only at " + srcFile + ": ", removed)
                if args.both:
                    if args.dry:
                        print("Following tags copied from " + dstFile + " to " + srcFile + ": ", removed)
	  	    else:
		        comp.mergeReverse()


            changed=comp.changedTags()
            if changed!=[]:
                changed.sort()
   	        if args.time and os.path.getmtime(srcFile) > os.path.getmtime(dstFile):
		    if args.dry or args.verbose:
                        print("Following tags overwrites from " + srcFile + " to " + dstFile + ": ", changed)
		    else:
  		        # Copy changed to dst.
			pass
                elif args.overwrite:
		    if args.dry or args.verbose:
                        print("Following tags overwrites from " + srcFile + " to " + dstFile + ": ", changed)
		    else:
  		        # Copy changed to dst.
			pass
                elif args.time and args.both and os.path.getmtime(srcFile) < os.path.getmtime(dstFile):
                    if args.dry or args.verbose:
                        print("Following tags overwrites from " + dstFile + " to " + srcFile + ": ", changed)
		    else:
  		        # Copy changed to src.
			pass


if __name__ == "__main__":
    try: import flacCompare
    except ImportError:
        sys.path.append(os.path.abspath("../flac-utils"))
        import flacCompare
    main(sys.argv)