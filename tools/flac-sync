#!/usr/bin/env python

from __future__ import print_function
from mutagen.flac import FLAC
from flac_compare import flac_compare
import sys
import os
import argparse
import shutil

rating_tags_to_ignore = ['RATING:', 'PLAYCOUNT:']


def is_not_rating_tag(arg):
    upper_arg = arg.upper()
    for t in rating_tags_to_ignore:
        if upper_arg.startswith(t):
            return False
    return True

def copy_files_from_dest_to_src(args):
    for root, dirs, files in os.walk(args.DESTDIR):
        if len(root)>0 and (root[0]=='.' or root.find("/.")!=-1):
            continue
    	srcroot=args.SRCDIR+root[len(args.DESTDIR):]
	for name in files:
	    dstFile=os.path.join(root, name)
	    srcFile=os.path.join(srcroot, name)
            if args.verbosity>=3:
	        print("Working with dst: " + dstFile + "    src: " + srcFile)
	    if not os.path.isfile(dstFile):
	        if args.verbosity>=1:
		   print("File " + dstFile + " missing.")
		if args.copy:
                    if args.copy_only_flac:
                        try:
                            FLAC(srcFile)
                        except:
                            continue
		    if not args.dry:
                        if not os.access(os.path.dirname(srcFile), os.W_OK):
                            os.makedirs(os.path.dirname(srcFile))
                        shutil.copyfile(dstFile, srcFile)
		    else:
		        print("cp " + dstFile + " " + srcFile)
                continue

def in_exclude(fileName, excludeSet):
    for l in excludeSet:
        if fileName.count(l)>0:
            return True
    return False


def main(argv):
    parser = argparse.ArgumentParser(
        description='Sync file tree of flacs comments for files with the same audio-part.',
        epilog="""flac-sync take two directories and sync the those directory
        trees flac files comment. File with different audio part are not
        handled. If a files only exist in one of the trees the file is ignored.
        """)
    parser.add_argument('SRCDIR', help='Flac file used as base line.')
    parser.add_argument('DESTDIR', help='Second flac file.')
    parser.add_argument('-v', '--verbose',  action='append_const', const=1, default=[],
                        help='Verbose output. Several times gives mor verbosity.')
    parser.add_argument('-a', '--audio', action='store_true',
                        help='Tell when audio part differs.')
    parser.add_argument('-b', '--both', action='store_true',
                        help='Save all tags to both files.')
    parser.add_argument('-c', '--copy', action='store_true',
                        help='Copy missing files from source to dest.')
    parser.add_argument('--copy-only-flac', action='store_true',
                        help='Copy only flac files, skip other files.' +
                        'Only effect together with -c and --copy.')
    parser.add_argument('-d', '--dry', action='store_true',
                        help='Dry run. Only tells what differs.')
    parser.add_argument('-t', '--time', action='store_true',
                        help='take notice of time stamps.')
    parser.add_argument('-o', '--overwrite', action='store_true',
                        help='If a tags differ between src and dest.' +
                        'src value is copied to dest.')
    parser.add_argument('-e', '--exclude', type=argparse.FileType('r'),
                        help='Exclude paths listed in file.')
    parser.add_argument('--ignore-pictures', action='store_true',
                        help='Ignore handling of pictures in flac files.')
    parser.add_argument('-r', '--rating', action='store_true',
                       help='Include rating tags in sync.')
    
    args = parser.parse_args(argv[1:])
    args.verbosity=len(args.verbose)

    args.verbosity=len(args.verbose)

    if args.time and args.overwrite:
        print("Argument error: time and overwrite cammot be combined.", file=sys.stderr)
        sys.exit(3)

    excludeFiles=set([])
    if args.exclude:
        for line in args.exclude:
            excludeFiles.add(line.strip())

    args.SRCDIR=os.path.abspath(args.SRCDIR)
    args.DESTDIR=os.path.abspath(args.DESTDIR)

    ignore_list=[]
    if not args.rating:
        ignore_list=ignore_list+rating_tags_to_ignore

    for root, dirs, files in os.walk(args.SRCDIR):
        if len(root)>0 and (root[0]=='.' or root.find("/.")!=-1):
            continue
    	destroot=args.DESTDIR+root[len(args.SRCDIR):]

        # Loop over all files in a directory.
	for name in files:
	    srcFile=os.path.join(root, name)
            if in_exclude(srcFile, excludeFiles):
                if args.verbosity>=2:
   	            print("Excludeing source: " + srcFile)
                continue
            srcUpdated=False
	    dstFile=os.path.join(destroot, name)
            if in_exclude(dstFile, excludeFiles):
                if args.verbosity>=2:
   	            print("Excludeing destination: " + dstFile)
                continue
            dstUpdated=False
            if args.verbosity>=3:
	        print("Working with src: " + srcFile + "    dst: " + dstFile)
	    if not os.path.isfile(dstFile):
	        if args.verbosity>=1:
		   print("File " + dstFile + " missing.")
		if args.copy:
                    if args.copy_only_flac:
                        try:
                            FLAC(srcFile)
                        except:
                            continue
		    if not args.dry:
                        if not os.access(os.path.dirname(dstFile), os.W_OK):
                            os.makedirs(os.path.dirname(dstFile))
                        shutil.copyfile(srcFile, dstFile)
		    else:
		        print("cp " + srcFile + " " + dstFile)
                continue
            try:
                srcFlac=FLAC(srcFile)
            except:
                print("ERROR: Cannot handle source file %s, skipping."%srcFile, file=sys.stderr)
                continue
            try:
                dstFlac=FLAC(dstFile)
            except:
                print("ERROR: Cannot handle destination file %s, skipping."%dstFile, file=sys.stderr)
                continue

            # We have to flac files, time to compare them.
            comp=flac_compare.FlacCompare(srcFlac,dstFlac)
 	    if comp.equals():
                # If files equal do not do anything.
	        if args.verbosity>=2:
		    print(srcFile + " and " + dstFile + " are equal.")
	        continue

            if not comp.audio_equal():
	       	if args.copy:
		    if not args.time or os.path.getmtime(srcFile) > os.path.getmtime(dstFile):
                        if not args.dry:
                            shutil.copyfile(srcFile, dstFile)
  		        else:
		            print("cp " + srcFile + " " + dstFile)
		    elif args.both and args.time and os.path.getmtime(srcFile) < os.path.getmtime(dstFile):
                        if not args.dry:
                            shutil.copyfile(dstFile, srcFile)
  		        else:
		            print("cp " + dstFile + " " + srcFile)
                elif args.verbosity>=1:
                    print(srcFile + " and " + dstFile +
                          " are not audio equal, ignored.")
		continue
            elif args.verbosity>=3:
                print(srcFile + " and " + dstFile + " audio are equal.")

            # Have destination some tags source does not have?
            new=comp.new_tags()
            if not args.rating:
                new = filter(is_not_rating_tag, new)
            if new!=[]:
                new.sort()
	        if args.verbosity>=1:
                    print("Following tags exist only at dst " + dstFile + ": ", new)
                if args.both:
                    if args.dry:
                        print("Following tags copied from dst " + dstFile + " to " +
                              srcFile + ": ", new)
	  	    else:
                        srcUpdated=True
		        comp.merge_reverse(ignore=ignore_list)
            
            # Have source some tags destination does not have?
            removed=comp.removed_tags()
            if not args.rating:
                removed = filter(is_not_rating_tag, removed)
            if removed!=[]:
                removed.sort()
	        if args.verbosity>=1:
                    print("Following tags exist only at src " + srcFile + ": ", removed)
                if args.dry:
                    print("Following tags copied from src " + srcFile + " to dst " +
                          dstFile + ": ", removed)
		else:
                    dstUpdated=True;
		    comp.merge(ignore=ignore_list)

            # Look at common tags and how they may have changed.
            changed=comp.changed_tags()
            if not args.rating:
                changed = filter(is_not_rating_tag, changed)
            if changed!=[]:
                changed.sort()
   	        if args.time and os.path.getmtime(srcFile) > os.path.getmtime(dstFile):
                    if args.dry:
                        print("Following tags overwrites from src " + srcFile + " to dst " +
                              dstFile + ": ", changed)
		    else:
                        if args.verbosity>=1:
                            print("Following tags overwrites from src " + srcFile + " to dst " +
                                  dstFile + ": ", changed)
  		        # Copy changed to dst.
                        dstUpdated=True
                        for changedTag in changed:
                            dstFlac[changedTag]=srcFlac[changedTag]
                elif args.overwrite:
                    if args.dry:
                        print("Following tags overwrites from src " + srcFile + " to dst " +
                              dstFile + ": ", changed)
		    else:
                        if args.verbosity>=1:
                            print("Following tags overwrites from src " + srcFile + " to dst " +
                                  dstFile + ": ", changed)
  		        # Copy changed to dst.
                        dstUpdated=True
                        for changedTag in changed:
                            dstFlac[changedTag]=srcFlac[changedTag]
                elif args.time and args.both and os.path.getmtime(srcFile) < os.path.getmtime(dstFile):
                    if args.dry:
                        print("Following tags overwrites from dst " + dstFile + " to src " +
                              srcFile + ": ", changed)
		    else:
                        if args.verbosity>=1:
                            print("Following tags overwrites from dst " + dstFile + " to src " +
                                  srcFile + ": ", changed)
  		        # Copy changed to src.
                        srcUpdated=True
                        for changedTag in changed:
                            srcFlac[changedTag]=dstFlac[changedTag]

            # We have now compared and managed our tags, time for the pictures.
            # Have destination some pictures source does not have?
            new=comp.new_pictures()
            if new!=[]:
                new.sort()
	        if args.verbosity>=1:
                    print(len(new), "picture(s) only exist in dst ", dstFile)
                if args.both:
                    if args.dry:
                        print(len(new), "picture(s) copied from dst ",
                              dstFile, " to src ", srcFile)
	  	    else:
                        srcUpdated=True
		        comp.merge_pictures_reverse()
            
            # Have source some pictures destination does not have?
            removed=comp.removed_pictures()
            if removed!=[]:
                removed.sort()
	        if args.verbosity>=1:
                    print(len(removed), "picture(s) only exist in src ", srcFile)
                if args.dry:
                    print(len(removed), "picture(s) copied from src ",
                              srcFile, " to dst ", dstFile)
		else:
                    dstUpdated=True
		    comp.merge_pictures()            

            # Save our changes.
            if not args.dry:
                if dstUpdated:
                    dstFlac.save()
                if args.both and srcUpdated:
                    srcFlac.save()

    if args.both and args.copy:
        copy_files_from_dest_to_src(args)

if __name__ == "__main__":
    main(sys.argv)
