#!/usr/bin/env python

from __future__ import print_function
from mutagen.flac import FLAC
from flac_compare import flac_compare
import sys
import os
import argparse
import shutil

def main(argv):
    parser = argparse.ArgumentParser(
        description='Sync file tree of flacs comments for files with the same audio-part.',
        epilog="""flac-sync take two directories and sync the those directory
        trees flac files comment. File with different audio part are not
        handled. If a files only exist in one of the trees the file is ignored.
        """)
    parser.add_argument('SRCDIR', help='Flac file used as base line.')
    parser.add_argument('DESTDIR', help='Second flac file.')
    parser.add_argument('-v', '--verbose', action='store_true', help='Verbose output.')
    parser.add_argument('-a', '--audio', action='store_true', help='Tell when audio part differs.')
    parser.add_argument('-b', '--both', action='store_true', help='Save all tags to both files.')
    parser.add_argument('-c', '--copy', action='store_true', help='Copy missing files from source to dest.')
    parser.add_argument('-d', '--dry', action='store_true', help='Dry run. Only tells what differs.')
    parser.add_argument('-t', '--time', action='store_true', help='take notice of time stamps.')
    parser.add_argument('-o', '--overwrite', action='store_true', help='If a tags differ between src and dest. src value is copied to dest.')
    
    args = parser.parse_args(argv[1:])

    if args.time and args.overwrite:
        print("Argument error: time and overwrite cammot be combined.")
        sys.exit(3)

    for root, dirs, files in os.walk(args.SRCDIR):
        if len(root)>0 and (root[0]=='.' or root.find("/.")!=-1):
            continue
    	destroot=args.DESTDIR+root[len(args.SRCDIR):]
	for name in files:
	    srcFile=os.path.join(root, name)
	    dstFile=os.path.join(destroot, name)
            if args.verbose:
	        print("Working with src: " + srcFile + "    dst: " + dstFile)
	    if not os.path.isfile(dstFile):
	        if args.verbose:
		   print("File " + dstFile + " missing.")
		if args.copy:
		    if not args.dry:
		        os.makedirs(os.path.dirname(dstFile))
                        shutil.copyfile(srcFile, dstFile)
		    else:
		        print("cp " + srcFile + " " + dstFile)
                continue

            try:
                srcFlac=FLAC(srcFile)
            except:
                print("ERROR: Cannot handle source file %s, skipping."%srcFile)
                continue
            try:
                dstFlac=FLAC(dstFile)
            except:
                print("ERROR: Cannot handle destination file %s, skipping."%dstFile)
                continue

            comp=flac_compare.FlacCompare(srcFlac,dstFlac)
 	    if comp.equals():
                # If files equal do not do anything.
	        if args.verbose:
		    print(srcFile + " and " + dstFile + " are equal.")
	        continue

            if not comp.audio_equal():
	       	if args.copy:
		    if not args.time or os.path.getmtime(srcFile) > os.path.getmtime(dstFile):
                        if not args.dry:
                            shutil.copyfile(srcFile, dstFile)
  		        else:
		            print("cp " + srcFile + " " + dstFile)
		    elif args.both and args.time and os.path.getmtime(srcFile) < os.path.getmtime(dstFile):
                        if not args.dry:
                            shutil.copyfile(dstFile, srcFile)
  		        else:
		            print("cp " + dstFile + " " + srcFile)
                else:
                    print(srcFile + " and " + dstFile + " are not audio equal, ignored.")
		continue
            elif args.verbose:
                print(srcFile + " and " + dstFile + " audio are equal.")

            new=comp.new_tags()
            if new!=[]:
                new.sort()
	        if args.verbose:
                    print("Following tags exist only at " + dstFile + ": ", new)
                if args.both:
                    if args.dry:
                        print("Following tags copied from " + dstFile + " to " + srcFile + ": ", new)
	  	    else:
		        comp.merge_reverse()
            

            removed=comp.removed_tags()
            if removed!=[]:
                removed.sort()
	        if args.verbose:
                    print("Following tags exist only at " + srcFile + ": ", removed)
                if args.dry:
                    print("Following tags copied from " + srcFile + " to " + dstFile + ": ", removed)
		else:
		    comp.merge()


            changed=comp.changed_tags()
            if changed!=[]:
                changed.sort()
   	        if args.time and os.path.getmtime(srcFile) > os.path.getmtime(dstFile):
                    if args.dry:
                        print("Following tags overwrites from " + srcFile + " to " + dstFile + ": ", changed)
		    else:
                        if args.verbose:
                            print("Following tags overwrites from " + srcFile + " to " + dstFile + ": ", changed)
  		        # Copy changed to dst.
                        for changedTag in changed:
                            dstFlac[changedTag]=srcFlac[changedTag]
                elif args.overwrite:
                    if args.dry:
                        print("Following tags overwrites from " + srcFile + " to " + dstFile + ": ", changed)
		    else:
                        if args.verbose:
                            print("Following tags overwrites from " + srcFile + " to " + dstFile + ": ", changed)
  		        # Copy changed to dst.
                        for changedTag in changed:
                            dstFlac[changedTag]=srcFlac[changedTag]
                elif args.time and args.both and os.path.getmtime(srcFile) < os.path.getmtime(dstFile):
                    if args.dry:
                        print("Following tags overwrites from " + dstFile + " to " + srcFile + ": ", changed)
		    else:
                        if args.verbose:
                            print("Following tags overwrites from " + dstFile + " to " + srcFile + ": ", changed)
  		        # Copy changed to src.
                        for changedTag in changed:
                            srcFlac[changedTag]=dstFlac[changedTag]
            if not args.dry:
                dstFlac.save()
                if args.both:
                    srcFlac.save()
            

if __name__ == "__main__":
    main(sys.argv)
